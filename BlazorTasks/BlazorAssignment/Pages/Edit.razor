@page "/Edit/{Id:int}"
@using BlazorAssignment.Models
@using BlazorAssignment.Data
@inject IAdultsData InjectedAdultData
@inject NavigationManager NavMgr

<h3>Edit adult with id: @Id</h3>
@if (adultToEdit == null)
{
    <em>Adult does not exist</em>
}
else
{
    <EditForm Model="@adultToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">Job title<br/>
            <InputTextArea @bind-Value="adultToEdit.JobPosition.JobTitle"/>
        </div>

        <div class="form-group">Salary<br/>
            <InputNumber @bind-Value="adultToEdit.JobPosition.Salary"/>
        </div>

        <div class="form-group">ID <br/>
            <InputNumber @bind-Value="adultToEdit.Id"/>
        </div>

        <div class="form-group">Firstname<br/>
            <InputTextArea @bind-Value="adultToEdit.FirstName"/>
        </div>

        <div class="form-group">Lastname<br/>
            <InputTextArea @bind-Value="adultToEdit.LastName"/>
        </div>

        <div class="form-group">Haircolor<br/>
            <InputTextArea @bind-Value="adultToEdit.HairColor"/>
        </div>



        <div class="form-group">Weight<br/>
            <InputNumber @bind-Value="adultToEdit.Weight"/>
        </div>

        <div class="form-group">Height<br/>
            <InputNumber @bind-Value="adultToEdit.Height"/>
        </div>

        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Save</button>
        </p>


    </EditForm>
}
@code {
    [Parameter]
    public int Id { get; set; }

    private Adult adultToEdit;
    
    protected override async Task OnInitializedAsync()
    {
        adultToEdit = await InjectedAdultData.Get(Id);
    }

    private void Save()
    {
        InjectedAdultData.UpdateAdultAsync(adultToEdit);
        NavMgr.NavigateTo("/Adults");
    }
}