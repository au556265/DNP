@page "/Adults"
@using Ex1LoginExample.Data
@using Ex1LoginExample.Models
@inject IAdultsData InjectedAdultData
@inject NavigationManager NavMgr

<h1>Adult list </h1>
<p>
    Filter by ID: <input type="number" @oninput="@((arg)=>Filter(arg))" style ="width:50px" />
</p>

<p>
  Filter by lastname: <input type="text" @oninput="@((arg) => FilterByLastName(arg))" style="width:50px"/>
</p>
@if ( adultsToShow== null)
{
    <p>
        <em>
            Loading...
        </em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>No ToDo Items exist. Please add some.</em>
    </p>

}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Job Title: </th>
            <th>Job Salary: </th>
            <th>ID</th>
            <th>First name: </th>
            <th>Last name: </th>
            <th>Haircolor: </th>
            <th>Eyecolor: </th>
            <th>Age: </th>             
            <th>Weight: </th>
            <th>Height: </th>
            <th>Sex: </th>
            
            <AuthorizeView Policy="MustBeEditorOrAdmin" >

                <th>Edit: </th>
                <th>Remove</th>
                            

            </AuthorizeView> 


        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.JobPosition.JobTitle</td>
                <td>@item.JobPosition.Salary</td>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <AuthorizeView Policy="MustBeEditorOrAdmin">
                <td>
                    <button @onclick="@(() => Edit(item.Id))">
                        <i class="oi oi-pencil" style="color:#1b6ec1"> </i>
                    </button>
                </td>
                    
                <td>
                    <button @onclick="@(() => RemoveAdult(item.Id))">
                        <i class="oi oi-trash" style="color:#ff0000"> </i>
                    </button>
                </td>  
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private IList<Adult> allAdults;
    private IList<Adult> adultsToShow;

    protected override async Task OnInitializedAsync()
    {
        allAdults = await InjectedAdultData.GetAdultsAsync();
        adultsToShow = allAdults;
    }
    
    private void RemoveAdult(int adultId)
    {
        Adult adultToRemove = allAdults.First(t => t.Id == adultId);
        InjectedAdultData.RemoveAdultAsync(adultId);
        allAdults.Remove(adultToRemove);
        adultsToShow.Remove(adultToRemove);
    }

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        int? filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e){}
        if (filterById != null)
        {
            adultsToShow = allAdults.Where(t => t.Id == filterById).ToList();
        }
        else
        {
            adultsToShow = allAdults;
        }
    }
    private void FilterByLastName(ChangeEventArgs changeEventArgs)
    {
        string? filterByLastName = null;
        try
        {
            filterByLastName=changeEventArgs.Value.ToString();
        }
        catch (Exception e){}
        if (filterByLastName != null)
        {
            adultsToShow = allAdults.Where(t => t.LastName == filterByLastName).ToList();
        }
        else
        {
            adultsToShow = allAdults;
        }
    }

    private void Edit(int id)
    {
        NavMgr.NavigateTo($"Edit/{id}");
    }
    
    }